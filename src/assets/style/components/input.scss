//$inputPadding: 8px 11px;
.ga-input {
  position: relative;
  display: inline-flex;
  //display: flex;
  //vertical-align: middle;
  max-width: 100%;
  font-size: 1em;
  input, textarea, .input {
    vertical-align: baseline;
    font-size: 1rem;
    padding: $inputPadding;
    line-height: $inputLineHeight;
    font-weight: 400;
    border: 1px solid var(--brd);
    background-color: var(--bgc);
    color: var(--txt);
    transition-duration: .2s;
    border-radius: $baseInputRadius;
    outline: none;
    flex: 1 0 auto;
    max-width: 100%;
    &:hover {
      border-color: #c0c4cc;
    }
    &:focus {
      border-color: $primary;
      &::placeholder {
        opacity: 1;
      }
    }
    &::placeholder {
      font-weight: 100;
      color: #c4c4c4;
      //opacity: 0.9;
    }
    &.align {
      &-left {text-align: left;}
      &-center {text-align: center;}
      &-right {text-align: right;}
    }
  }
  &[disabled], &.disabled {
    > input, > textarea {
      background-color: var(--suf);
      border-color:var(--brd);
      opacity: 0.5;
      pointer-events: none;
    }
  }
  &.readonly {
    > input, > textarea {
      pointer-events: none;
    }
  }
  &.underline > input {
    background: transparent;
    border-radius: 0;
    border: 0;
    border-bottom: 1px solid var(--brd);
    &:focus {
      border-color: $primary
    }
  }
  &.transparent, &.editable {
    input {
      background: transparent;
      border-color: transparent;
      &:hover {
        border: 1px dashed var(--brd);
        background-color: var(--suf);
      }
      &:focus {
        border: 1px solid $primary;
        background-color: var(--suf);
      }
    }
  }
  &.fluid {
    display: flex;
    width: 100%;
    margin-bottom: 5px;
  }
  &.edit {
    margin-right: 5px;
    input {
      background: transparent;
      border-color: transparent;
      pointer-events: none;
    }
    &.editable {
      input {
        pointer-events: auto;
        border: 1px solid $primary;
      }
      > :not(input) {
        display: inline-block !important;
      }
    }
    > :not(input) {
      display: none !important;
    }
  }
  &[class*='unit'] {
    input {
      padding-right: 2.5em !important;
    }
    &:after {
      content: attr(data-unit);
      position: absolute;
      top: 50%;
      right: 10px;
      transform: translate(0, -50%);
    }
  }
  &.unit {
    @for $i from 1 through 5 {
      &-#{$i} {
        input {padding-right: $i + em !important;}
      }
    }
  }
  &.badge {
    input {
      padding-right: 3em;
    }
    .ga-badge {
      top: 50%;
      right: 0;
      transform: translate(-50%, -50%);
    }
  }
  &.icon {
    > i.icon {
      pointer-events: none;
      position: absolute;
      height: 2em;
      width: 2em;
      text-align: center;
      opacity: .5;
      top: 50%;
      transform: translateY(-50%);
      &:before {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
      }
    }
    &.both {
      input {
        padding-left: 2.5em;
        padding-right: 2.5em;
      }
      i.icon {
        &:first-child {
          left: 0;
          transform: translate(5px, -50%);
        }
        &:last-child {
          right: 0;
          transform: translate(-5px, -50%);
        }
      }
    }
    &.left {
      input {padding-left: 2.5em;}
      i.icon {
        left: 0;
        transform: translate(5px, -50%);
      }
    }
    &.right {
      input {padding-right: 2.5em;}
      i.icon {
        right: 0;
        transform: translate(-5px, -50%);
      }
    }
    &.link {
      > i.icon {
        pointer-events: auto;
        cursor: pointer;
        &.circle {
          border-radius: 50%;
        }
        &:hover {
          opacity: 1;
          background-color: #f8f8f8;
        }
      }
    }
  }
  &.labeled {
    label, .label {
      //font-family: $fontNameKr;
      display: flex;
      align-items: center;
      background-color: var(--brd);
      padding: $verticalPadding;
      line-height: 1;
      vertical-align: baseline;
      &.outline {
        background-color: var(--bgc);
        border: 1px solid var(--brd);
        opacity: .8;
      }
    }
  }
  &.button, &.labeled {
    input, .ga-button, label, .label {
      border-radius: 0;
    }
    input {
      z-index: 10;

    }
    .ga-button {
      display: flex;
      align-items: center;
      border: 1px solid var(--brd);
      //box-shadow: 0 0 2px $borderColor inset;
    }
    &.left {
      input {
        border-top-right-radius: $baseInputRadius;
        border-bottom-right-radius: $baseInputRadius;
      }
      .ga-button, label, .label {
        margin-right: -1px;
        border-top-left-radius: $baseInputRadius;
        border-bottom-left-radius: $baseInputRadius;
        order: -1;
      }
    }
    &.right {
      input {
        border-top-left-radius: $baseInputRadius;
        border-bottom-left-radius: $baseInputRadius;
      }
      .ga-button, label, .label {
        margin-left: -1px;
        border-top-right-radius: $baseInputRadius;
        border-bottom-right-radius: $baseInputRadius;
      }
    }
  }

  textarea {
    width: 100%;
    min-height: 10em;
    padding: 6px 10px;
    resize: none;
  }
  &.short textarea {
    min-height: 4em;
  }
  & + .ga-input:not(.fluid) {
    margin-left: 5px;
  }
  &.inline {
    display: inline-flex;
  }
  &.compact {
    input,
    .ga-button {
      padding: $compactPadding;
    }
  }
}

@each $color, $values in $stateColors {
  $textColor: #{nth($values, 1)};
  $hoverColor: #{nth($values, 2)};
  .ga-input {
    //background-color: transparent;
    &.#{$color} {
      > input, > textarea {
        color: $textColor;
        border-color: $textColor;
        &.hover, &.focus,
        &:hover, &:focus {
          border-color: $hoverColor;
        }
        &::placeholder {
          color: $textColor;
        }
      }
    }
  }
}
